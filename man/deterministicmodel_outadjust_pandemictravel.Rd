% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deterministicmodel_outadjust_pandemictravel.R
\name{deterministicmodel_outadjust_pandemictravel}
\alias{deterministicmodel_outadjust_pandemictravel}
\title{This function gives deterministic realization for n countries with a given regulated
strategy and quarantine duration required by the destination countries
for each travel out country depends on the situation of the travel out country
It also returns number new cases active confirmed each day during the pandemic if quarantine
exist and traveler status after done quarantine if any quarantine need.}
\usage{
deterministicmodel_outadjust_pandemictravel(thetamatrix, inp)
}
\arguments{
\item{thetamatrix}{is a matrix of parameters, parameters of each country is on 1 row}

\item{inp}{is a list include durationtravel : durationtravel (days),
 durationquarantine_adjustedin : number of days people travel in have to quarantine based on each country policy,
travelregulated: a list of travel allowed from 1 country to another during the duration,
initialmatrix is a matrix of initial compartments of countries, each country is on 1 row, and
quarantinerate is the rate people follow quarantine}
}
\value{
The average realization of n countries with travel data regulated, also return
travelers status after quarantine, and active confirm update during the quarantine time
}
\description{
This function gives deterministic realization for n countries with a given regulated
strategy and quarantine duration required by the destination countries
for each travel out country depends on the situation of the travel out country
It also returns number new cases active confirmed each day during the pandemic if quarantine
exist and traveler status after done quarantine if any quarantine need.
}
\examples{
\dontrun{
library(CONETTravel)
thetagenerating = function(lowerbound, upperbound){
 tmp2 = 1 # need for kick off
 while(tmp2 >0){
  theta = c( alpha0 = 0,alpha = runif(1,0,1),beta = runif(1,0,.25), delta=runif(1,0,.25),
             eta=1, gamma=runif(1,0,1) )
  tmp1 = theta[2]/(theta[3] + theta[6])
  tmp2 = (tmp1 - lowerbound)*(tmp1 - upperbound)
}
return(theta)
}
initialmatrix_func =  function(numbercountries){
 initialmatrix = matrix(0, numbercountries, 6)
 for (country in 1:numbercountries){
   P = round(runif(1, 50000, 20000000000), digits=0)
   I = round(runif(1, 100000, 200000), digits=0)
   S = P - I
  initialmatrix[country,] = c(S, I, 0, 0,0,0)
 }
return(initialmatrix)
}
travelout_data = travelout_3dat
initial_corona =  initialmatrix_func(3)
P = rowSums(initial_corona)
theta0 = rbind(thetagenerating(1,6.5), thetagenerating(.5,6.5), thetagenerating(.5,6.5))
thetamatrix = theta0
ratein = 1 # policy that allows full rate of travel in
traveloutDivideRegulated = totaltravelout_samerate_regulated(travelout_data, ratein, P)
inp = list(durationtravel = 84, travelregulated = traveloutDivideRegulated,
         initialmatrix = initial_corona, quarantinerate = 1, durationquarantine_adjustedout = c(0,7,14))
 deterministicmodel_outadjust_pandemictravel(theta0, inp)
}
}
